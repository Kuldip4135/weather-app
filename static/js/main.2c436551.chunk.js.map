{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","onChange","e","target","value","onSubmit","preventDefault","fetch","then","res","json","result","type","placeholder","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","src","icon","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oPAGMA,G,MACC,oCADDA,EAEE,2CAyFOC,MAvFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA+Cb,OACE,yBAAKC,UAAU,OACb,0BACEA,UAAU,YACVC,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOC,QACnCA,MAAOR,EACPS,SAjDgB,SAACH,GACrBA,EAAEI,iBACFC,MAAM,GAAD,OAAId,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLZ,EAAWY,GACXd,EAAS,SA6CT,2BACEe,KAAK,OACLZ,UAAU,aACVa,YAAY,oBAGU,oBAAhBf,EAAQgB,KACd,yBAAKd,UAAU,WACb,4BACGF,EAAQiB,KADX,IACkBjB,EAAQkB,IAAIC,SAE9B,4BApDU,SAACC,GACnB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,WACA,YACA,YAciBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GAsBtBE,CAAY,IAAIC,OAErB,4BACE,yBACEC,IAAG,4CAAuC/B,EAAQA,QAAQ,GAAGgC,KAA1D,aAEJhC,EAAQgB,KAAKiB,KAJhB,QAKE,yBACEF,IAAG,4CAAuC/B,EAAQA,QAAQ,GAAGgC,KAA1D,cAGP,+BAAQhC,EAAQA,QAAQ,GAAGgB,OAG7B,MC3EUkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c436551.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst api = {\n  key: \"85c42e2ef90eecb87cb1bedd07986f73\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const SearchWeather = (e) => {\n    e.preventDefault();\n    fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n        setQuery(\"\");\n      });\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"january\",\n      \"february\",\n      \"march\",\n      \"april\",\n      \"may\",\n      \"june\",\n      \"july\",\n      \"august\",\n      \"september\",\n      \"octomber\",\n      \"novermber\",\n      \"december\",\n    ];\n    let days = [\n      \"sunday\",\n      \"monday\",\n      \"tuesday\",\n      \"wednesday\",\n      \"thursday\",\n      \"friday\",\n      \"saturday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div className=\"app\">\n      <form\n        className=\"app__form\"\n        onChange={(e) => setQuery(e.target.value)}\n        value={query}\n        onSubmit={SearchWeather}\n      >\n        <input\n          type=\"text\"\n          className=\"app__input\"\n          placeholder=\"Enter City Name\"\n        />\n\n        {typeof weather.main != \"undefined\" ? (\n          <div className=\"weather\">\n            <h1>\n              {weather.name},{weather.sys.country}\n            </h1>\n            <h4>{dateBuilder(new Date())}</h4>\n\n            <h2>\n              <img\n                src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n              />\n              {weather.main.temp}Â°C\n              <img\n                src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n              />\n            </h2>\n            <small>{weather.weather[0].main}</small>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}